import { isNumber } from '@app/utils/functions/check/js/core/isNumber';

/**
 * A list of all possible {@link MozInputSource} values. This is a non-standard
 * value used in Firefox.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/mozInputSource#value
 */
export enum MozInputSources {
	/**
	 * The input device is unknown.
	 */
	MOZ_SOURCE_UNKNOWN,

	/**
	 * The event was generated by a mouse (or mouse-like device).
	 */
	MOZ_SOURCE_MOUSE,

	/**
	 * The event was generated by a pen on a tablet.
	 */
	MOZ_SOURCE_PEN,

	/**
	 * The event was generated by an eraser on a tablet.
	 */
	MOZ_SOURCE_ERASER,

	/**
	 * The event was generated by a cursor.
	 */
	MOZ_SOURCE_CURSOR,

	/**
	 * The event was generated on a touch interface.
	 */
	MOZ_SOURCE_TOUCH,

	/**
	 * The event was generated by a keyboard.
	 */
	MOZ_SOURCE_KEYBOARD,
}

/**
 * Any one of the above {@link MozInputSources}.
 */
export type MozInputSource = keyof typeof MozInputSources;

/**
 * A list of all {@link MozInputSource} values.
 */
export const MOZ_INPUT_SOURCES = Object.freeze(
	Object.values(MozInputSources).filter(isNumber),
);

/**
 * Checks that an `unknown` value is a {@link MozInputSource}.
 *
 * Requirements:
 *   - `value` must be a non-empty string and must be included as a string key
 *     of {@link MozInputSources}.
 *
 * @param value - An `unknown` value.
 *
 * @returns The determination that `value` is or is not a {@link MozInputSource}.
 */
export const isMozInputSource = (value: unknown): value is MozInputSource =>
	/**
	 * value
	 */
	isNumber(value) && MOZ_INPUT_SOURCES.includes(value);
